@RestController
@RequestMapping(path = "/employees")
public class EmployeeController {

    private static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);

    private EmployeeDao employeeDao;

    @GetMapping(path="/{employeeId}", produces = "application/json")
    public ResponseEntity<Employee> getEmployees(@PathVariable Long employeeId) {

        ResponseEntity<Employee> response = null;

        try {
            if(null==employeeId || positionId.equals(0L)) {

                throw new InvalidInputException("Employee Id is not valid");

            }
           employee = employeeDao.getEmployeeDetails(employeeId);

            response = new ResponseEntity<Employee>(employee,HttpStatus.OK);
        }
        catch(InvalidInputException e) {

            Logger.error("Invalid Input:",e.getMessage());

            response = new ResponseEntity<Employee>(employee,HttpStatus.BAD_REQUEST);
        }
        catch(BusinessException e) {

            Logger.error("Business Exception:",e.getMessage());

            response = new ResponseEntity<Employee>(employee,HttpStatus.INTERNAL_SERVER_ERROR);
        }
        catch(Exception e) {

            Logger.error("System Error:",e.getMessage());

            response = new ResponseEntity<Employee>(employee,HttpStatus.INTERNAL_SERVER_ERROR);
        }
        return response;
    }

    

    @GetMapping(path="/address/{employeeId}", produces = "application/json")

    public ResponseEntity<Address> getEmployeeAddress(@PathVariable Long employeeId,@RequestHeader Long userId) {

        ResponseEntity<Address> response = null;

        try {

            if(null==employeeId || positionId.equals(0L)) {

                throw new InvalidInputException("Employee Id is not valid");
            }
            if(null==userId || userId.equals(0L)) {

                throw new UnauthorizedException("Unauthorized user")
            }
            address = employeeDao.getEmployeeAddress(employeeId);
            response = new ResponseEntity<Address>(address,HttpStatus.OK);
       }
        catch(UnauthorizedException e) {

            Logger.error("Unauthorized:",e.getMessage());

            response = new ResponseEntity<Address>(address,HttpStatus.BAD_REQUEST);
        }
        catch(InvalidInputException e) {

            Logger.error("Invalid Input:",e.getMessage());

            response = new ResponseEntity<Address>(address,HttpStatus.BAD_REQUEST);
        }
        catch(Exception e) {

            Logger.error("System Error:",e.getMessage());

            response = new ResponseEntity<Address>(address,HttpStatus.INTERNAL_SERVER_ERROR);
        }
		return response;
    }
}
